<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java多线程]]></title>
    <url>%2Fposts%2Fa2c3ad19%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[redis]]></title>
    <url>%2Fposts%2F7b25d017%2F</url>
    <content type="text"><![CDATA[Redishttps://www.jianshu.com/p/56999f2b8e3b数据库管理系统将数据存储在磁盘、磁带以及其他的裸设备上，虽然这些设备的访问速度相比内存慢很多，但其非易失性和大容量的特点使他们成为数据存储的不二之选。 在高并发的时候，单一使用数据库来保存数据的系统会因为面向磁盘，磁盘读/写速度比较慢的问题而存在严重的性能弊端，极其容易造成数据库系统瘫痪 Redis （持每秒十几万此的读/写操作）在 Java Web 主要有两个应用场景： 存储 缓存 用的数据需要高速读/写的场合使用它快速读/写 如果我们把数据放在 Redis 中，也就是直接放在内存之中，让服务端直接去读取内存中的数据，那么这样速度明显就会快上不少，并且会极大减小数据库的压力，但是使用内存进行数据存储开销也是比较大的，限于成本的原因，一般我们只是使用 Redis 存储一些常用和主要的数据，比如用户登录的信息等。从流程可以看出，更新或者写入的操作，需要多个 Redis 的操作，如果业务数据写次数远大于读次数那么就没有必要使用 Redis。 Windows Redis启动redis-server redis.windows.conf如果报错按照面执行https://www.cnblogs.com/biehongli/p/10034216.htmlhttps://www.cnblogs.com/hgj123/p/8011098.html命令行进入到redis目录 Redis-cli.exe shutdown exit redis-server.exe redis.windows.conf 如果执行完第二步报(error) NOAUTH Authentication required.输入AUTH 76792454 在执行2 3 4]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Data structure]]></title>
    <url>%2Fposts%2F2a88d111%2F</url>
    <content type="text"><![CDATA[java中的链表堆栈队列 堆栈就是链表的头插和头删队列java中提供了工具类可以供使用 Queue queue = new LinkedList(); https://www.runoob.com/java/data-queue.html同步问题https://blog.csdn.net/qq_42914528/article/details/83819292 二叉搜索树的基本操作https://www.cnblogs.com/yandufeng/p/10845118.html 堆的基本操作https://www.cnblogs.com/g177w/p/8469399.html 哈夫曼树的基本操作https://www.cnblogs.com/skywang12345/p/3706833.html#anchor4 图的操作https://www.cnblogs.com/g177w/p/8475492.html邻接矩阵（数组实现）适合稠密图 稀疏图的话会空间浪费可以定义为一个二维数组但是有空间的浪费（只考虑无向图的情况）每一条边存两边所以可以定义为一个一维数组长度为(N(N+1))/2 N为顶点的个数 求Gij的下标 为 (i(i+1))/2 +j)就是求i上边的最后一个节点的下标加上j 邻接表 适合稀疏图 因为一条边存两遍DFS和DFSDFS空间效率高，BFS时间效率高DFS适合求解特定解，BFS适合求解最优解 DFS伪码void DFS(Vertex V){Visited[V] = true;for(V的每个邻接点W){ Visited[W] = true; if(!visited[W]){ DFS(W);} }} BFS伪码void BFS(Vertex V){ Visited[V] = true; enqueue(V,Q); while(!Q.isEmpry()){ V = dequeue(Q); for(V的每个邻接点W){ if(!Visited[W]){ Visited[W] = true; enqueue(W); } } }} 如果图不连通void ListComponents(Graph g){for(each V in G){ if(!Visited[V]){ DFS(V);或者BFS(V); }} } 最短路径无权图单源最短路径(和BFS算法类似)void unWeight(Vertex S){ Enqueue(S,Q); while(!isEmpty(Q)){ V = Dequeue(Q); for(V的每个邻接点W){ if(dist[W]== -1){//表示这个节点没有被访问过 dist[W] = dist[V]+1; path[W] = V; Enqueue(W,Q); } } }} 有权图单源最短路径Dijkstra算法令S{S源点,已经确定了最短路径的顶点V}新增加的V（只经过S中的节点 如果存在一个W节点 S到V的距离小于S到W到V的距离 这是不成立的因为我们每次找的是dist[]最小的显然S到W的距离小于S到V的距离）只能影响他的邻接点的dist[]值直接使用这个算法稠密图 将dist[]存到最小堆中是个稀疏图dist[]定义为无穷大void Dijkstra(Vertex V){ while(1){ V = 未收录顶点中dist最小者; if(这样的V不存在)break; collected[V] = true; for(V的每个邻接点W){ if(collected[W]==false){ if(dist[V]+V到M的权重&lt;dist[W]){ dist[W] = dist[V]+V到M的权重 path[W] = V; } } } }} 多源最短路径Floyd算法 适合稠密图dist[]定义为无穷大void Floyd(){ //N为顶点个数 for(int i = 0;i&lt;N;i++){ for(int j = 0;j&lt;N;j++){ D[i][j] = Graph[i][j]; path[i][j] = -1; } } for(int k = 0;k&lt;N;k++){ for(int i = 0;i&lt;N;i++){ for(int j = 0;j&lt;N;j++){ if(D[i][k]+D[k][j]&lt;D[i][j]){ D[i][j] = D[i][k]+D[k][j]; path[i][j] = k; } } } } } 最小生成树问题Prim算法(和Dijkstra算法差不多)每次找到与当前最小生成树中节点权值最小的节点把他收入到最小生成树中void Prim(){ MST = {s}; s为顶点 while(1){ V = 未收录顶点中dist最小者; if(这样的V不存在)break; 将V收入到MST中dist[V]=0; for(V的每个邻接点W){ if(dist[W]!=0){ if(V到W的权重小于dist[W]){ dist[W] = V到W的权重; parent[W] = V; } } } } if(MST中收录的顶点个数小于图中的顶点){ 说明图不连通 没有生成树 }} Kruskal算法每次收录图中最小的边前提是判断当前收录的边是否构成回路void Kruskal(){ MST = {}; while(MST中不到顶点个数-1条边&amp;&amp;E中还有边){ 从E中去权重最小的边E(V,W); 将E(V,W)从E中删除 if(E(V,W)不在MST中构成回路){ 将E(V,W)插入到MST中 }else{ 什么也不做 } } if(MST中收录的顶点个数小于图中的顶点){ 说明图不连通 没有生成树 }} 散列表散列表取长度应该取装填因子a等于0.7或者0.8a = 表中使用的空间个数/表中空间总个数 解决hash冲突 开放地址法（线性探测，平方探测（正负q的平方 q&lt;=tableSize/2）双散列）双散列为:d = i*h2(key) 对于任意的key h2(key)不等于0例子：h2(key) = p-(key mod p);p-(key mod p)是一个散列函数 (key mod p)也是一个散列函数 分离链式法把冲突的数据有链表链在当前节点上比如2这个节点放了2又放了3 那么2这个节点存储的是一个链表 链表中的节点分别为2和3 Java常用排序算法https://www.cnblogs.com/ll409546297/p/10956960.html]]></content>
      <categories>
        <category>Data structure</category>
      </categories>
      <tags>
        <tag>Data structure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springBoot]]></title>
    <url>%2Fposts%2F207b1172%2F</url>
    <content type="text"><![CDATA[把SpringBoot项目部署到Tomcat上运行 1： org.sang chapter01 war 0.0.1-SNAPSHOT chapter01 Demo project for Spring Boot 配置packaing2：在配置运行Tomcat上添加项目的Artifacts3：https://www.cnblogs.com/wutongshu-master/p/11660755.html配置一个类加载SpringBoot中心类; SpringBoot application.properties中注入中文类型 在Controller中获取乱码情况在properties配置文件中加上server.tomcat.uri-encoding=UTF-8spring.http.encoding.charset=UTF-8spring.http.encoding.enabled=truespring.http.encoding.force=truespring.messages.encoding=UTF-8 使用application.yml注入bean(要把application.properties删除)注意: yml冒号后要有空格,如果不加空格, 会导致yml配置读取失效name: 三国演义添加依赖 org.springframework.boot spring-boot-configuration-processor true 自定义错误页面获取不到值自定义的错误页面放在templates/error下继承BasicErrorControllerhttps://www.jianshu.com/p/fb6a88b2cffb 启动类相当于web.xmlpublic class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) { return builder.sources(Chapter01Application.class); }} SpringBoot整合layuihttps://blog.csdn.net/wulianzhazha/article/details/92209750 配置xml在java下 src/main/java /. src/main/resources /.]]></content>
  </entry>
  <entry>
    <title><![CDATA[后端资源]]></title>
    <url>%2Fposts%2F91ea888d%2F</url>
    <content type="text"><![CDATA[Maven:官网：http://maven.apache.org/教程：https://www.cnblogs.com/best/tag/Maven/Maven库：http://repo2.maven.org/maven2/中央仓库资源：寻找jar包经常用的http://mvnrepository.com/https://search.maven.org/Mybatis:教程 https://www.cnblogs.com/best/tag/Mybatis/官方中文文档 https://mybatis.org/mybatis-3/zh/getting-started.htmlSpring:https://www.cnblogs.com/best/tag/Spring/Aop简单的使用:https://www.cnblogs.com/wmyskxz/p/8835243.htmlSpring源码分析:https://www.cnblogs.com/warehouse/tag/%E6%A1%86%E6%9E%B6/default.html?page=1]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>后端资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[问题]]></title>
    <url>%2Fposts%2Fb6f7494e%2F</url>
    <content type="text"><![CDATA[Spring项目找不到创建servlethttps://blog.csdn.net/lalala323/article/details/89301837IDEA中访问Servlet 404https://blog.csdn.net/zwt_1/article/details/81533294IDEA中引入JQ失败https://blog.csdn.net/qq_33793462/article/details/99739852 jsckson报错5001:Project Structure2:选择Artifacts3:把Output Layout 右边的Available Elements下的jar put到下 不能添加Servlet的解决方法1：打开项目描述.iml文件，指定源代码目录：2： jackson序列化中的日期问题1在日期字段（javabean）中加注解@JsonFormat(locale = “zh”,timezone = “GMT+8”,pattern = “yyyy-MM-dd HH:mm:ss”)2设置SimpleDateFormatSimpleDateFormat dateFormat = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);ObjectMapper mapper = new ObjectMapper();]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java工具类]]></title>
    <url>%2Fposts%2F5eaef6f6%2F</url>
    <content type="text"><![CDATA[JacksonUtils序列化工具类 import java.text.SimpleDateFormat;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper; public class JsonUtils { /** * 序列化成json * */ public static String toJson(Object obj) { // 对象映射器 ObjectMapper mapper = new ObjectMapper(); SimpleDateFormat sdf = new SimpleDateFormat(“yyyy年MM月dd HH:mm:ss”); mapper.setDateFormat(sdf); String result = null; // 序列化user对象为json字符串 try { result = mapper.writeValueAsString(obj); } catch (JsonProcessingException e) { e.printStackTrace(); } return result; } /** * 反序列化成对象 * */ public static &lt;T&gt; T toObject(String json,Class&lt;T&gt; valueType) { //对象映射器 ObjectMapper mapper=new ObjectMapper(); T result=null; try { result=mapper.readValue(json,valueType); }catch (Exception e) { e.printStackTrace(); } return result; }}]]></content>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ajax]]></title>
    <url>%2Fposts%2Fc5a6a264%2F</url>
    <content type="text"><![CDATA[原生Ajaxfunction getXHR(){ //判断是否拥有xhr对象 if(window.XMLHttpRequest){ return new XMLHttpRequest(); }else if(window.ActiveXObject){ //ie6,ie5下的xhr对象获得办法 return new ActiveXObject(“Microsoft.XMLHTTP”); } return null;} function getTime_click(){ var xhr=getXHR(); //当状态变化时的事件 xhr.onreadystatechange=function(){ if(xhr.readyState==4){ //请求成功 if(xhr.status==200){ //服务器响应状态成功 //将从服务器获得的数据显示在页面上 document.getElementById(“time”).innerHTML= xhr.responseText; } } } //打开请求 xhr.open(“GET”,”GetTime”,true); //请求类型,路径,是否为异步请求 //发送请求 xhr.send(null); //参数 }onreadystatechange中的4种readyState存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。 0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪 多种status200: “OK”404: 未找到页面 Jquery中ajax序列化表单$.get(“#button”).click(function(){ $.get(“”,$(“#form1”).serialize,function(){ });});将表单中元素序列化成数组$(“#form”).serializeArray()参数化$.param({a:1,b:3,c:5})//a=1&amp;b=3&amp;c=5 js中序列化与反序列化序列化JSON.stringify(对象)比如var tom = {name:”汤姆”,age:18};String str = JSON.stringify(tom) 反序列化：var tomClone = JSON.parse(str);alert(tomClone.name);]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fposts%2F0%2F</url>
    <content type="text"><![CDATA[title: jquerytags: jquerycategories: jqueryabbrlink: fa32cf69 date: 2019-11-13 12:38:57动态事件和静态事件的区别比如button on和clickhtml页面上本来有的东西调用静态时间通过js动态添加的东西需要绑定事件 js使用正则https://www.cnblogs.com/liverpool-ADH/p/9905279.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[SSM示例]]></title>
    <url>%2Fposts%2Ff21c6577%2F</url>
    <content type="text"><![CDATA[jsp跳转到Controller 路径丢失项目名http://localhost:8080/SsmDemo_war_exploded/index.jsphttp://localhost:8080/SsmDemo_war_exploded/Controller 丢失SsmDemo_war_exploded 解决办法https://blog.csdn.net/qq_17213067/article/details/74452169 修改路径： ${pageContext.request.contextPath}/Controller http://localhost:8080/SsmDemo_war_exploded/stu/goToUpdate?id=#{stu.id}http://localhost:8080/SsmDemo_war_exploded/stu/goToUpdate?id=${stu.id} JSP Controller互相传值问题https://www.cnblogs.com/friends-wf/p/3801120.html 从Controller传值到Jsp 参数获取不到加这个标签&lt;%@ page isELIgnored=”false” %&gt; SSM整合Democnblogs.com/charlypage/p/9163857.html1 Java类: 包: Controller(处理用户的提交申请然后请求Model返回Modelandview 然后处理驶入) mapper(数据库映射类) pojo (javabean) service(包含两个东西service接口(数据库访问封装方法) service接口实现类(实现service接口的方法 在这些方法中再去调用mapper包下的class的方法)配置文件: Spring配置文件(applicationContext.xml) SpringMVC配置文件(applicationContext-mvc.xml) Mybatis配置文件（mybatis-config.xml）(可以省略 省略的内容在Spring配置文件中配置) mapper配置文件(Javabean类的名字+mapper.xml)mybatis数据库映射配置文件 namespace:映射类的具体路径(XXXMapper)) web.xml配置文件 Maven引入jar包(pom.xml) db.properties上边3个都在resources文件下配置 最后一个在resources下创建文件夹mapper下配置视图文件: view(WEB-INF下创建的文件夹)存放视图文件 application.xml 读取db.properties 注解开发 扫描注解包 数据源(datasource) 创建sqlSessionFactory ==&gt; mybatis核心配置文件的读取 扫描mybatis的mapper接口路径 事务处理 application-mvc.xml 开启注解 扫描 过滤掉js, jpg, png, css, 静态文件 开启mvc 地址解析器 mybatis-config.xml（注意各个标签的顺序） 地址解析器 开启二级缓存 web.xml（注意各个标签的顺序） 读取除了mvc外的配置文件 整个web容器的动向由这个监听器进行监听. 这个监听器可以监听项目的启动. 从而直接加载核心配置文件 filter(设置utf-8编码用) 配置DispatcherServlet分发器（SpringMVC）]]></content>
      <categories>
        <category>SSM示例</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mavenjar包]]></title>
    <url>%2Fposts%2F12cb9b35%2F</url>
    <content type="text"><![CDATA[org.slf4j slf4j-api 1.7.12 ch.qos.logback logback-core 1.1.1 provided &lt;!--实现slf4j接口并整合--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.25&lt;/version&gt; &lt;/dependency&gt; &lt;!-- C3p0数据连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.5.2&lt;/version&gt; &lt;/dependency&gt; !--2.dao框架:MyBatis依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--mybatis自身实现的spring整合依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--3.Servlet web相关依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--servlet--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!--4:spring依赖--&gt; &lt;!--1)spring核心依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--2)spring dao层依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--3)springweb相关依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--4)spring test相关依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.12&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--Aop要导入的包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.8.9&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.json/json --&gt; &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20170516&lt;/version&gt; &lt;/dependency&gt; jackson &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.9.9.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.9.8&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;2.9.9&lt;/version&gt; &lt;/dependency&gt; java文件上传 &lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt; commons-io commons-io 2.4 commons-fileupload commons-fileupload 1.3.3 com.googlecode.json-simple json-simple 1.1]]></content>
      <categories>
        <category>MavenJar</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringMybatis]]></title>
    <url>%2Fposts%2F1d1f67ca%2F</url>
    <content type="text"><![CDATA[Spring简单整合Mybatis1：在Pom.xml添加Spring核心，AOP，JDBC，MyBatis-Spring，Mybatis等jar包。2：实现db.properties数据库配置文件 MybatisConf.xml Mybatis配置文件 Mapper映射文件3：创建Pojo 数据访问接口 数据访问接口实现类4：配置SpringConf.xml 配置Spring配置文件MybatisConf.xml可以不加标签具体SpringConf.xml文件 &lt;context:property-placeholder location=”db.properties” /&gt; &lt;!–注入MybatisConf.xml文件 value为文件的位置&gt; &lt;/bean&gt; &lt;!--配置映射器--&gt; &lt;bean id=&quot;userMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt; &lt;!--实现mapper的接口（自己写的）--&gt; &lt;property name=&quot;mapperInterface&quot; value=&quot;dao.UserMapper&quot;/&gt; &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt; &lt;/bean&gt; 主函数调用 ApplicationContext acx = new ClassPathXmlApplicationContext(“SpringConf.xml”); //这里的UserMapper为接口类 UserMapper userMapper = (UserMapper) acx.getBean(“userMapper”); User user = userMapper.getUserById(1); System.out.println(user); Spring整合Mybatis升级版 去掉MyBatisCfg.xml配置文件只需要修改Spring配置文件里的SqlSessionFactory添加 &lt;!–指定映射文件 &lt;!–如果是注解实现的映射那么配置mapperLocations改为 &lt;!--自动扫描映射接口 把Mapper标签改为--&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!-- 指定sql会话工厂，在上面配置过的 --&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt; &lt;!-- 指定基础包，即自动扫描com.zhangguo.Spring61.mapping这个包以及它的子包下的所有映射接口类 --&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.zhangguo.Spring61.mapping&quot;&gt;&lt;/property&gt; &lt;/bean&gt;]]></content>
      <categories>
        <category>SpringMybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springLoc]]></title>
    <url>%2Fposts%2F18d6d006%2F</url>
    <content type="text"><![CDATA[使用注解配置Bean在POJO的上边配置@Component在Spring配置文件中在那个包下扫描带有注解的bean&lt;context:component-scan base-package=””/&gt;具体的在某个包下排除某个类看博客 自动装配@Autowired在容器中的bean中根据类型自动注入值也可也和@Qualifier(“XXX”)配合使用 XXX代表bean的名字@Resource装配顺序 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配； 纯注解配置loc 1：定义数据库访问接口/** 图书数据访问接口 / public interface IBookDAO { /** 添加图书 / public String addBook(String bookname);} 2：实现数据库接口/** 图书数据访问实现类 / @Repositorypublic class BookDAO implements IBookDAO { public String addBook(String bookname) { return &quot;添加图书&quot;+bookname+&quot;成功！&quot;; }} 3：service类/** 图书业务类 / @Servicepublic class BookService { @Resource IBookDAO bookDAO; public void storeBook(String bookname){ System.out.println(&quot;图书上货&quot;); String result=bookDAO.addBook(bookname); System.out.println(result); }} 4：定义一个替代xml的ApplicationCfg容器类/** 容器的配置类 / @Configuration@ComponentScan(basePackages=”com.zhangguo.Spring051.ioc06”)public class ApplicationCfg { @Bean public User getUser(){ return new User(&quot;成功&quot;); }} @Configuration相当于配置文件中的，ComponentScan相当于配置文件中的context:component-scan，属性也一样设置 ,@Bean相当于，只能注解在方法和注解上，一般在方法上使用，源码中描述：@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})，方法名相当于id。中间使用到了User，User类的代码如下：5：数据访问 ApplicationContext ctx=new AnnotationConfigApplicationContext(ApplicationCfg.class); BookService bookservice=ctx.getBean(BookService.class); bookservice.storeBook(“《Spring MVC权威指南 第四版》”);具体的参考博客]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis]]></title>
    <url>%2Fposts%2Fda3e1361%2F</url>
    <content type="text"><![CDATA[第一步在resources文件下创建conf.xml文件里边包括了数据库的驱动 username password url 还有mapping（映射文件） 第二步建立在resources文件下创建mapper文件 在mapper文件下创建数据库映射文件一般名字为表名+Mapping.xml比如studentMapping文件里包括返回结果还有sql语句 测试类里//加载配置文件conf.xmlInputStream inputStream = StudentDao.class.getClassLoader().getResourceAsStream(“conf.xml”); import org.apache.ibatis.io.Resources;Reader reader = Resources.getResourceAsReader(“conf.xml”);//根据配置文件创建会话工厂SqlSessionFactory sqlSessionFactory= new SqlSessionFactoryBuilder().build(inputStream);//打开会话SqlSession session = sqlSessionFactory.openSession();//查询语句第一个参数为映射文件的nameapace+identity = session.selectOne(“com.zhangguo.mybatis02.dao.studentMapper.selectStudentById”,id);//关闭会话 session.close();SELECT * from student WHERE id = #{id}SELECT * FROM WHERE name like ‘%${name}%’ #{}为占位符（这个会把传入东西的类型+东西）${}为替代符（这个只会传入东西）传入Sring name = ”zhangsan“ #{name} “zhangsan“${name} zhangsan必须写value SELECT * FROM student WHERE name like ‘%${value}%’ mysql创建外键的条件1.要创建的外键的数据表A（主表）和关联表B（从表）必须是InnoDB存储引擎 2.要创建的A表字段数据类型必须和B表对应的字段的数据类型保持一致，包括长度 3.B表对应的字段必须建立了索引或者是主键 4.A表的外键【删除时】如果设置了【set null】那么B表对应的该字段必须是【允许为空】，否则无法创建成功 基于注解实现数据库的映射创建数据库映射类在conf.xml中注册mapper实现映射类与xml不同的是需要加载映射器StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);在映射器中进行CRUD操作 嵌套查询中如果不 如果不自定义resultMap(这个返回结果的话)那么Emp里的User对象将会为null映射文件namespace 具体命名规则（https://www.cnblogs.com/zjdxr-up/p/8681382.html）namespace 对应接口的路径 动态sqlif test判断语句 有length（）函数where 当有1个以上的if语句用where sql语句不用写where 比如有两个if其中一个if不成立 它会自动去除掉该语句中的and or 等连接词if set（update语句） 当有多个条件是不用写逗号 比如有两个if其中一个if不成立 它会自动去除掉该语句中的逗号 或者两个都不成立的话set自动删除]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC]]></title>
    <url>%2Fposts%2Fae0f95e0%2F</url>
    <content type="text"><![CDATA[1:以下是对应于到DispatcherServlet的传入HTTP请求的事件顺序：在接收到HTTP请求后，DispatcherServlet会查询HandlerMapping以调用相应的Controller2:Controller接受请求并根据使用的GET或POST方法调用相应的服务方法。 服务方法将基于定义的业务逻辑设置模型数据，并将视图名称返回给DispatcherServlet3:DispatcherServlet将从ViewResolver获取请求的定义视图。4:当视图完成，DispatcherServlet将模型数据传递到最终的视图，并在浏览器上呈现。这些Controller需要在 mvc-dispatcher-servlet.xml中注册 比如视图解析器 所有上述组件，即: HandlerMapping，Controller和ViewResolver是WebApplicationContext的一部分，它是普通ApplicationContext的扩展，带有Web应用程序所需的一些额外功能。&lt;context:component-scan base-package=”com.yiibai.springmvc” /&gt; //声明要扫描的包 //处理视图的类//第2行声明呈现视图的文件(比如jsp)的前缀位置//第3行说明文件的后缀&lt;bean 1 class=”org.springframework.web.servlet.view.InternalResourceViewResolver”&gt; 2 3 最后把Spring框架整合到Web应用中 mvc-dispatcher org.springframework.web.servlet.DispatcherServlet 1//指定启动顺序 1为该servlet会随着servlet容器一起启动 mvc-dispatcher 表示分发器要拦截的请求 比如 / , *.do ，/hello.jsp 拦截所以,拦截所有以do为后缀的文件,拦截hello.jsp 设置bean定义文件的位置和名称 (也就是Controller配置的位置和文件名称)/WEB-INF/mvc-dispatcher-servlet.xml 设置监听器 org.springframework.web.context.ContextLoaderListener HelloController.class @Controller@RequestMapping(“/welcome”) //说明访问的urlpublic class HelloController{ @RequestMapping(Method = RequestMethod.GET)声明请求的方法 public String printWelcome(ModelMap model){ model.addAttribute(“message”,”Hello world”); //在jsp中可以通过 ${message} 得到该值 return “hello”; //把处理结果交给hello.jsp 显示 }} hello.jsp Hello ${message} ————————————————————————————————————————————————————————————————————————————Controller的返回View和Model的函数@RequestMapping(value = “/student”, method = RequestMethod.GET) public ModelAndView student() { return new ModelAndView(“student”, “command”, new Student()); }例如这个例子返回给student.jsp form:form 需要command的这个对象 name和new Student的name是绑定在一起的如果给new Student的name赋值那么student.jsp 会显示他的值前提是student得有name这个变量student.jsp public String action11(Model model){ //向模型中添加一个名为product的对象，用于渲染视图 model.addAttribute(“product”, new Product(“Meizu note1”, 999)); return “bar/action11”; } product为Controller传来的Modelbody&gt; &lt;form:form modelAttribute=”product”&gt; 名称： &lt;form:input path=”name” /&gt; 价格： &lt;form:input path=”price” /&gt; &lt;form:input path=”name” /&gt; 相当于 SpringMvc不进入Controller的可能性之一：方法上没加@RequestMapper（）]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven]]></title>
    <url>%2Fposts%2F7273cdc%2F</url>
    <content type="text"><![CDATA[创建Maven项目并且部署在Tomcat上运行 https://www.jianshu.com/p/501f85bc4288 将其他的项目转成Maven项目右键点击项目名字选择Add Framework support 坐标： groupId , artifactId , version 三个元素是项目的坐标，唯一的标识这个项目。 groupId 项目所在组，一般是组织或公司 artifactId 是当前项目在组中的唯一ID； version 表示版本，SNAPSHOT表示快照，表示此项目还在开发中，不稳定。 groupId 和实际项目不一定是一一对应的，maven 有模块的概念，例如 spring-core, spring-context…；groupId 也不应该只对应公司或组织名，建议具体到项目名，因为公司或者组织下有多个项目，而artifactId只能代表模块名。 运行Maven项目需要在Run下的Edit configratuions中配置Deployment选择这个war exploded结尾的 模块间的依赖参考：https://www.cnblogs.com/best/p/9676515.html#_label0假如一道题的解法：整个解法是一个整体 就是父模块可能里边用到很多方面的函数 就是子模块里边用到的函数可能还用到了变量 所以函数依赖于变量 将项目转化为idea项目mvn idea:idea编译,将Java 源程序编译成 class 字节码文件mvn compile打包,动态 web工程打 war包，Java工程打 jar 包mvn pakage只打jar包：mvn jar:jar只打war包：mvn war:war]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springAop]]></title>
    <url>%2Fposts%2F10e6cf28%2F</url>
    <content type="text"><![CDATA[代理模式：主要是把业务逻辑与一些与业务不相关的代码分离出来1：静态代理利用接口的形式(业务逻辑)将被代理对象放到实现接口的类(包含一些 与业务不相关的代码)中 2：利用JDK内置的Proxy用一个静态代理类去实现InvocationHandler 3：利用cglib实现用一个动态代理类去实现MethodInterceptor AOP（动态代理的AOP）：前置通知实现MethodBeforeAdvice后置通知实现AfterReturningAdvice环绕童子实现MethodInterceptor//实例化Spring代理工厂ProxyFactory factory=new ProxyFactory();//设置被代理的对象factory.setTarget(new Math());//添加通知，横切逻辑factory.addAdvice(new BeforeAdvice());factory.addAdvice(new AfterAdvice());factory.addAdvice(new SurroundAdvice());//从代理工厂中获得代理对象IMath math=(IMath) factory.getProxy();使用xml配置动态代理的aop &lt;bean id=&quot;target&quot; class=&quot;com.zhangguo.Spring041.aop06.Math&quot;&gt;&lt;/bean&gt; &lt;!--通知、横切逻辑--&gt; &lt;bean id=&quot;advice&quot; class=&quot;com.zhangguo.Spring041.aop06.AfterAdvice&quot;&gt;&lt;/bean&gt; &lt;!--代理对象 --&gt; &lt;!--interceptorNames 通知数组 --&gt; &lt;!--p:target-ref 被代理的对象--&gt; &lt;!--p:proxyTargetClass 被代理对象是否为一个类，如果是则使用cglib,否则使用jdk动态代理 --&gt; &lt;bean id=&quot;proxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot; p:interceptorNames=&quot;advice&quot; p:target-ref=&quot;target&quot; p:proxyTargetClass=&quot;true&quot;&gt;&lt;/bean&gt;aop表达式类型execution//com.zhangguo.Spring052.aop03包下所有类的所有方法被切入 @After(“execution(* com.zhangguo.Spring052.aop03..(..))”)within //com.zhangguo.Spring052.aop03包下所有类的所有方法被切入 @After(“within(com.zhangguo.Spring052.aop03.*)”)this //实现了IMath接口的代理对象的任意连接点 @After(“this(com.zhangguo.Spring052.aop03.IMath)”)target args //要求方法有两个int类型的参考才会被织入横切逻辑 @After(“args(int,int)”)bean 注解配置AOP在通知类上加@Component@Aspect声明这个类是切面在方法上@Befor After…在XML中配置&lt;aop:aspectj-autoproxy proxy-target-class=”true”&gt;proxy-target-class proxy-target-class=”true”属性表示被代理的目标对象是一个类，而非实现了接口的类，主要是为了选择不同的代理方式。]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客操作]]></title>
    <url>%2Fposts%2F19bd81cd%2F</url>
    <content type="text"><![CDATA[上传博客hexo new “新的文章”hexo g 生成新的静态文件hexo d 发布到GitHub在文章的适当位置加这个可以设置阅读全文 IDEA上传博客https://blog.csdn.net/woyizhizaizhaoni/article/details/90436721 IDEA更新博客https://www.cnblogs.com/igoodful/p/10522026.html hexo上传图片https://www.jianshu.com/p/8d28027fec76https://blog.csdn.net/Mandyucan/article/details/80421711 idea 给spring boot项目设置前台html修改后立即生效https://blog.csdn.net/banjing_1993/article/details/80860508SpringBoot热部署https://www.cnblogs.com/scorpio-xinghen/p/11660203.html SpringBoot不能访问静态资源https://blog.csdn.net/fengzyf/article/details/83341479]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
