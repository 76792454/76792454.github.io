<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jdbcTemplate]]></title>
    <url>%2Fposts%2Fe2756c2c%2F</url>
    <content type="text"><![CDATA[jdbcurl:jdbc:mysql://localhost:3306/student?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false driverClassName:com.mysql.cj.jdbc.Driver SPRING中的JDBC利用JDBCTEMPLATE 配置xml文件的DataSource &lt;bean id=&quot;dataSource&quot; name=&quot;dataSource&quot; class = &quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;76792454&quot;/&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/student?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;useSSL=false&quot;/&gt; &lt;/bean&gt; 配置JDBCTemplate &lt;bean id = &quot;jdbcTemplate&quot; class = &quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt; &lt;!-- &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; --&gt; &lt;constructor-arg&gt;&lt;ref bean=&quot;dataSource&quot;&gt;&lt;/ref&gt; &lt;/constructor-arg&gt; &lt;/bean&gt; 主函数 ApplicationContext acx = new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;); String sql = &quot;SELECT * FROM student&quot;; JdbcTemplate jdbcTemplate = (JdbcTemplate) acx.getBean(&quot;jdbcTemplate&quot;); List list = jdbcTemplate.queryForList(sql); for(int i = 0;i&lt;list.size();i++){ System.out.println(list.get(i).toString()); } JDBCTemplate 三种查询回调接口 //利用ResultSeltExtractor回调接口 List studentList = (List) jdbcTemplate.query(sql,new ResultSetExtractor(){ @Override public Object extractData(ResultSet resultSet) throws SQLException, DataAccessException { //return null; List students = new ArrayList(); while(resultSet.next()){ Student student = new Student(); student.setId(resultSet.getInt(&quot;id&quot;)); System.out.println(&quot;1:&quot;+student.getId()); student.setName(resultSet.getString(&quot;name&quot;)); System.out.println(&quot;1:&quot;+student.getName()); students.add(student); } return students; } }); //利用RowMapper回调接口 List studentList = jdbcTemplate.query(sql, new RowMapper() { @Override public Object mapRow(ResultSet resultSet, int i) throws SQLException { // return null; Student student = new Student(); student.setName(resultSet.getString(&quot;name&quot;)); student.setId(resultSet.getInt(&quot;id&quot;)); return student; } }); //利用RowCallbackHandler回调接口 List studentList = jdbcTemplate.query(sql, new RowMapper() { @Override public Object mapRow(ResultSet resultSet, int i) throws SQLException { // Student student = new Student(); student.setName(resultSet.getString(&quot;name&quot;)); student.setId(resultSet.getInt(&quot;id&quot;)); return student; } }); //sql中带有参数的查询 Object[] obj = {new String(&quot;a&quot;)}; sql = &quot;SELECT * FROM student WHERE name = ?&quot;; List studentList = (List) jdbcTemplate.query(sql, obj, new ResultSetExtractor() { @Override public List extractData(ResultSet resultSet) throws SQLException, DataAccessException { // return null; List students = new ArrayList(); while(resultSet.next()){ Student student = new Student(); student.setId(resultSet.getInt(&quot;id&quot;)); student.setName(resultSet.getString(&quot;name&quot;)); students.add(student); } return students; } }); Iterator&lt;Student&gt; it = studentList.iterator(); while(it.hasNext()){ Student student = it.next(); System.out.println(student.getName()+&quot;:&quot;+student.getId()); } // 直接插入 int id = 3; String name = &quot;b&quot;; sql = &quot;INSERT INTO student(id,name) values(&apos;&quot;+id+&quot;&apos;,&apos;&quot;+name+&quot;&apos;)&quot;; jdbcTemplate.update(sql); //重载PreparedStatementSetter jdbcTemplate.update(&quot;insert into student(id,name) values (?,?)&quot;, new PreparedStatementSetter() { @Override public void setValues(PreparedStatement preparedStatement) throws SQLException { preparedStatement.setInt(1,4); preparedStatement.setString(2,&quot;bb&quot;); } }); //利用Object[]设置SQL参数 int id = 5; String name = &quot;zzz&quot;; sql = &quot;insert into student(id,name) values(?,?)&quot;; jdbcTemplate.update(sql,new Object[]{id,name}); //更新 String oldName = &quot;a&quot;; String newName = &quot;aa&quot;; sql = &quot;update student set name = ? WHERE name = ?&quot;; jdbcTemplate.update(sql,new Object[]{newName,oldName}); //删除 String name = &quot;aa&quot;; sql = &quot;delete from student WHERE name = ?&quot;; jdbcTemplate.update(sql,new Object[]{name}); //同时执行多条语句 String sql1 = &quot;delete from student WHERE id = 1&quot;; String sql2 = &quot;delete from student WHERE id = 3&quot;; jdbcTemplate.batchUpdate(new String[]{sql1,sql2}); //插入20行记录 int count = 20; List&lt;Integer&gt; ids = new ArrayList&lt;Integer&gt;(count); List&lt;String&gt; names = new ArrayList&lt;String&gt;(count); for(int i = 0;i&lt;count;i++){ ids.add(i); names.add(&quot;123&quot;); } sql = &quot;INSERT INTO student (id,name) values(?,?)&quot;; jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() { @Override public void setValues(PreparedStatement preparedStatement, int i) throws SQLException { preparedStatement.setInt(1,ids.get(i)); preparedStatement.setString(2,names.get(i)); } @Override public int getBatchSize() { return count; } });]]></content>
      <categories>
        <category>jdbcTemplate</category>
      </categories>
      <tags>
        <tag>jdbcTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springdemo]]></title>
    <url>%2Fposts%2F10e6cf28%2F</url>
    <content type="text"><![CDATA[初学Spring的博客https://www.cnblogs.com/wmyskxz/tag/spring%E5%85%A5%E9%97%A8/ Spring的教程 http://how2j.cn/ 进阶Spring的博客https://www.cnblogs.com/best/tag/Spring/ Spring中的注解问题@Component(value = “student1”)public class Student { @Value(&quot;1&quot;) int id; @Value(&quot;student_name_1&quot;) String name; // getter and setter} @Component @Value相当于 @ComponentScan 相当于@Component声明了一个bean 但是Spring loc 不知道有这个bean 的存在 所以需要一个测试类去扫描所有类带有@Component @ComponentScanpublic class StudentConfig {} 默认情况下测试类只会扫描当前包下的@Component扫描指定包：@ComponentScan(basePackages = “pojo”)扫描指定包下的类@ComponentScan(basePackageClasses = pojo.Student.class)或者也可以在 XML 文件中声明去哪里做扫描&lt;context:component-scan base-package=”pojo” /&gt;&lt;context:component-scan base-package=”service” /&gt;@Autowired 自动装配 可以设置Value为某个类的对象@Value不能 设置对象 Aop简单的使用https://www.cnblogs.com/wmyskxz/p/8835243.html 例如包租婆和租房客和中介之间的关系 包租婆： 中介： 带租客看房 带租客看房 签合同 谈价格 谈价格 交钥匙 收房租 交钥匙 那么对于包租婆这个类来说 签合同和收房租是他的核心业务带租客看房，谈价格，交钥匙 就是切面切面 = 切入点+通知对于这个例子来说切入点就是包租婆的service方法 @Component(“landlord”)public class Landlord { public void service() { // 仅仅只是实现了核心的业务功能 System.out.println(&quot;签合同&quot;); System.out.println(&quot;收房租&quot;); }} @Component@Aspect //注册切面用于拦截包租婆的service的方法class Broker { @Before(&quot;execution(* pojo.Landlord.service())&quot;) public void before(){ System.out.println(&quot;带租客看房&quot;); System.out.println(&quot;谈价格&quot;); } @After(&quot;execution(* pojo.Landlord.service())&quot;) public void after(){ System.out.println(&quot;交钥匙&quot;); } //使用Around环绕通知 @Around(&quot;execution(* bean.Landlord.service())&quot;) public void Around(ProceedingJoinPoint joinPoint){ System.out.println(&quot;带租客看房&quot;); System.out.println(&quot;谈价格&quot;); try { joinPoint.proceed();//调用拦截的方法 就是包租婆的service方法 } catch (Throwable throwable) { throwable.printStackTrace(); } System.out.println(&quot;交钥匙&quot;); }} //在xml文件中声明扫描Component的包 &lt;context:component-scan base-package=”aspect” /&gt; &lt;context:component-scan base-package=”pojo” /&gt; aop:aspectj-autoproxy/ 测试代码 public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); Landlord landlord = (Landlord) context.getBean(&quot;landlord&quot;, Landlord.class); landlord.service(); }利用XML注册切面 aop:config &lt;aop:pointcut id=”landlordPoint” expression=”execution(* pojo.Landlord.service())”/&gt; &lt;aop:aspect id=”logAspect” ref=”broker”&gt; &lt;aop:around pointcut-ref=”landlordPoint” method=”around”/&gt; 参考博客https://www.cnblogs.com/wmyskxz/p/8835243.html]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Upload Blog]]></title>
    <url>%2Fposts%2F19bd81cd%2F</url>
    <content type="text"><![CDATA[上传博客hexo new “新的文章”hexo g 生成新的静态文件hexo d 发布到GitHub]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[summerplan]]></title>
    <url>%2Fposts%2Fc27ae11f%2F</url>
    <content type="text"><![CDATA[暑假计划: 1:学习SSM框架 2:写一个demo(SSM) Fighting!]]></content>
      <categories>
        <category>plan</category>
      </categories>
      <tags>
        <tag>SummerPlan</tag>
      </tags>
  </entry>
</search>
